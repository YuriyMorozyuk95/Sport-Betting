<?xml version="1.0" encoding="utf-8" ?>
<configuration>

  <!-- Create Database Statement -->
  <createDatabase>
    CREATE DATABASE {0} WITH OWNER = postgres ENCODING = 'UTF8';
  </createDatabase>

  <deleteDatabase>
    DROP DATABASE {0};
  </deleteDatabase>

  <databaseExists>
    select count(datname) from pg_catalog.pg_database where lower(datname) = '{0}'
  </databaseExists>

  <tableExists>
    SELECT count(tablename) from pg_tables WHERE lower(tablename) = '{0}'
  </tableExists>

  <requiredTables></requiredTables>


  <deleteFromTables>
    DELETE FROM Odd;
    DELETE FROM BetDomain;
    DELETE FROM betdomain_type;
    DELETE FROM bet_type;
    DELETE FROM score_type;
    DELETE FROM time_type;
    DELETE FROM MatchToGroup;
    DELETE FROM LiveMatchInfo;
    DELETE FROM competitor_to_outright;
    DELETE FROM Matches;
    DELETE FROM OutRightToGroup;
    DELETE FROM CompetitorToGroup;
    DELETE FROM MatchResult;
    DELETE FROM Groups;
    DELETE FROM OutRight;
    DELETE FROM Competitor;
    DELETE FROM strings;
    DELETE FROM tournament_match_lock;
    DELETE FROM conffactor;
    DELETE FROM version;
    DELETE FROM languages;
    DELETE FROM MultistringGroup;
  </deleteFromTables>

  <dropTables>
    DROP TABLE Odd;
    DROP TABLE BetDomain;
    DROP TABLE betdomain_type;
    DROP TABLE bet_type;
    DROP TABLE score_type;
    DROP TABLE time_type;
    DROP TABLE MatchToGroup;
    DROP TABLE LiveMatchInfo;
    DROP TABLE competitor_to_outright;
    DROP TABLE Matches;
    DROP TABLE OutRightToGroup;
    DROP TABLE CompetitorToGroup;
    DROP Table MatchResult;
    DROP TABLE Groups;
    DROP TABLE OutRight;
    DROP TABLE Competitor;
    DROP TABLE strings;
    DROP TABLE tournament_match_lock;
    DROP TABLE conffactor;
    DROP TABLE version;
    DROP TABLE languages;
    DROP TABLE MultistringGroup;
  </dropTables>

  <tables>
    <table name="DatabaseInfo">
      <statement type="DoesNotExist">
        CREATE TABLE DatabaseInfo
        (
        DatabaseInfoId BIGSERIAL NOT NULL PRIMARY KEY,
        Created timestamp with time zone NOT NULL DEFAULT NOW(),
        SolutionName VARCHAR (255),
        SolutionVersion VARCHAR (64)
        );
      </statement>
    </table>
    <table name="version">
      <statement type="DoesNotExist">
        CREATE TABLE version
        (
        id BIGSERIAL NOT NULL PRIMARY KEY,
        version VARCHAR (255)
        );
      </statement>
    </table>

    <table name="StationCash">
      <statement type="DoesNotExist">
        CREATE TABLE StationCash
        (
        StationCashID BIGSERIAL NOT NULL PRIMARY KEY,
        Cash decimal NOT NULL,
        MoneyIn smallint DEFAULT 0,
        OperationType VARCHAR (255),
        OperatorID VARCHAR (255) NOT NULL,
        CashCheckPoint smallint DEFAULT 0,
        DateModified timestamp with time zone NOT NULL DEFAULT NOW()
        );
      </statement>
    </table>

    <table name="Updates">
      <statement type="DoesNotExist">
        CREATE TABLE Updates
        (
        UpdateId BIGSERIAL NOT NULL PRIMARY KEY,
        Modified timestamp with time zone NOT NULL DEFAULT NOW(),
        UpdateType VARCHAR (32),
        Description VARCHAR (255),
        ProviderDescription VARCHAR (255),
        ProviderTag VARCHAR (32)
        );

        INSERT INTO Updates VALUES (0, NOW(), 'Empty', 'Empty', 'Empty', 'Empty');
      </statement>
    </table>

    <table name="UpdateFileEntry">
      <statement type="DoesNotExist">
        CREATE TABLE UpdateFileEntry
        (
        UpdateFileID BIGSERIAL NOT NULL PRIMARY KEY,
        DataSyncCacheID bigint NOT NULL,
        DataSyncCacheType varchar(32) NOT NULL,

        FileName varchar(255) NULL,
        Description varchar(255) NULL,
        CreateDate timestamp with time zone NULL
        );
      </statement>
    </table>

    <table name="bet_type">
      <statement type="DoesNotExist">
        CREATE TABLE bet_type
        (
        tag VARCHAR(32) PRIMARY KEY,
        name VARCHAR(255),
        external_state Text NULL
        );
      </statement>
    </table>

    <table name="score_type">
      <statement type="DoesNotExist">
        CREATE TABLE score_type
        (
        tag VARCHAR(32) PRIMARY KEY,
        name VARCHAR(255),
        external_state Text NULL
        );
      </statement>
    </table>


    <table name="StationAppConfig">
      <statement type="DoesNotExist">
        CREATE TABLE StationAppConfig
        (
        StationAppConfigID BIGSERIAL NOT NULL PRIMARY KEY,
        PropertyName varchar(255) NOT NULL,
        ValueString text NULL,
        ValueDateTime timestamp with time zone NULL,
        ValueDecimal decimal NULL,
        ValueInt int NULL
        );
      </statement>
    </table>

    <table name="time_type">
      <statement type="DoesNotExist">
        CREATE TABLE time_type
        (
        tag VARCHAR(32) PRIMARY KEY,
        name VARCHAR(255),
        external_state Text NULL
        );
      </statement>
    </table>

    <table name="betdomain_type">
      <statement type="DoesNotExist">
        CREATE TABLE betdomain_type
        (
        tag VARCHAR(32) PRIMARY KEY NOT NULL,
        mapping_code integer,
        name VARCHAR(80),
        bet_type VARCHAR(32) references bet_type(tag),
        score_type VARCHAR(32) references score_type(tag),
        time_type VARCHAR(32) references time_type(tag),
        sort int DEFAULT 0,
        active smallint DEFAULT 0,
        external_state Text NULL
        );
      </statement>
    </table>

    <table name="Groups">
      <statement type="DoesNotExist">
        CREATE TABLE Groups
        (
        GroupId BIGINT NOT NULL PRIMARY KEY,
        ParentGroupId BIGINT NULL REFERENCES Groups(GroupId),
        SvrGroupId BIGINT NOT NULL,
        UpdateId BIGINT REFERENCES Updates (UpdateId),
        Type VARCHAR(16) NOT NULL,
        Sort INT NOT NULL,
        Active smallint DEFAULT 0,
        ExternalState Text NULL
        );

        CREATE UNIQUE INDEX Groups_SvrGroupId_Type on Groups (SvrGroupId, Type);

        INSERT INTO Groups VALUES (0, NULL, 0, 0, '', 0)
      </statement>
    </table>

    <table name="OutRight">
      <statement type="DoesNotExist">
        CREATE TABLE OutRight
        (
        OutRightId bigint NOT NULL PRIMARY KEY,
        SvrOutRightId BIGINT NULL,
        OutRightType VARCHAR(32),
        UpdateId BIGINT references Updates,
        ExternalState xml
        );
      </statement>
    </table>

    <table name="ResourseRepository">
      <statement type="DoesNotExist">
        CREATE TABLE ResourseRepository
        (
        ResourceId BIGINT NOT NULL PRIMARY KEY,
        ResourceType varchar (32) NOT NULL,
        MimeType varchar (32) NOT NULL,
        Data text NOT NULL
        );
      </statement>
    </table>

    <table name="ResourceAssignment">
      <statement type="DoesNotExist">
        CREATE TABLE ResourceAssignment
        (
        ResourceId BIGINT NOT NULL,
        ObjectId BIGINT NOT NULL,
        ObjectClass varchar (32) NOT NULL,
        Active smallint DEFAULT 0,
        PRIMARY KEY (ObjectId, ObjectClass)
        );
      </statement>
    </table>

    <table name="competitorinfos">
      <statement type="DoesNotExist">
        CREATE TABLE competitorinfos
        (
        competitorinfoid BIGSERIAL NOT NULL PRIMARY KEY,
        superbtrid bigint NOT NULL,
        lastmodified timestamp NULL,
        tshirtaway text NULL,
        tshirthome text NULL,
        external_state Text NULL
        );

        CREATE INDEX super_btr_id ON competitorinfos (superbtrid );
      </statement>
    </table>

    <table name="tournamentinfos">
      <statement type="DoesNotExist">
        CREATE TABLE tournamentinfos
        (
        tournamentinfoid BIGSERIAL NOT NULL PRIMARY KEY,
        lastmodified timestamp NULL,
        external_state Text NULL
        );
      </statement>
    </table>

    <table name="matchinfos">
      <statement type="DoesNotExist">
        CREATE TABLE matchinfos
        (
        matchinfoid BIGSERIAL NOT NULL PRIMARY KEY,
        lastmodified timestamp NULL,
        external_state Text NULL
        );
      </statement>
    </table>

    <table name="conffactor">
      <statement type="DoesNotExist">
        CREATE TABLE conffactor
        (
        CFKey Text NOT NULL PRIMARY KEY,
        factor DECIMAL not NULL,
        livefactor DECIMAL not NULL
        );
      </statement>
    </table>

    <table name="languages">
      <statement type="DoesNotExist">
        CREATE TABLE languages
        (
        languageid bigint NOT NULL PRIMARY KEY,
        shortname varchar(16) not NULL,
        isterminal smallint not NULL
        );
      </statement>
    </table>
    <table name="MultistringGroup">
      <statement type="DoesNotExist">
        CREATE TABLE MultistringGroup
        (
        MultiStringGroupID bigint NOT NULL PRIMARY KEY,
        MultiStringGroupTag varchar(255) not NULL
        );
      </statement>
    </table>

    <table name="Competitor">
      <statement type="DoesNotExist">
        CREATE TABLE Competitor
        (
        CompetitorID BIGINT NOT NULL PRIMARY KEY,
        BtrCompetitorID int NULL,
        UpdateId BIGINT REFERENCES Updates (UpdateId),
        SvrCompetitorID int NULL,
        IsLiveBet smallint NULL,
        Base64Image Text NULL,
        ExternalState Text NULL --BetTaxTypBetTaxTypID int NULL,LocalCountyTaxLocationID int NULL,BtrLiveBetCompetitorID int NULL,
        );

        CREATE INDEX Competitor_UpdateID on Competitor using BTREE (UpdateID);

        INSERT INTO Competitor VALUES (0, 0, 0, 0, 0, '');
      </statement>
    </table>

    <table name="Matches">
      <statement type="DoesNotExist">
        CREATE TABLE Matches
        (
        MatchId BIGINT NOT NULL PRIMARY KEY,
        BtrMatchID int NULL,
        StartDate timestamp with time zone NULL,
        ExpiryDate timestamp with time zone NULL,
        EndDate timestamp with time zone NULL,
        HomeCompetitorId bigint NOT NULL references Competitor (CompetitorId),
        AwayCompetitorId bigint NOT NULL references Competitor (CompetitorId),
        UpdateID BIGINT references Updates,
        Code int NULL,
        Active smallint NOT NULL,
        IsLiveBet smallint NULL,
        SourceType smallint NOT NULL,
        outright_type smallint NOT NULL,
        NameTag varchar(64),
        TeamWon varchar(64),
        --??	State int NOT NULL,
        --	ExpiryDate timestamp NULL,
        --	MatchMinute int NULL,
        --	LB_PeriodInfo int NULL,
        --	LB_SportType int NULL,
        --	LiveBetStatus int NULL,
        --	MatchScore varchar(255) NULL,

        --	TeamWon varchar(255) NULL,
        --	PointsTeamHome int NULL,
        --	PointsTeamAway int NULL,
        --	PointsTeamAwayHalf1 int NULL,
        --	PointsTeamHomeHalf1 int NULL,
        --	WeekOfYear int NOT NULL,

        --	ActivateAfterDBSync smallint NULL,
        --	Deleted smallint NULL,
        --	PeriodType int NULL,
        --	Info varchar(255) NULL,
        --	Code_External varchar(255) NULL,
        --	InfoMultiStringID int NULL,

        ExtendedState TEXT NULL -- MinCombination int NULL, CardsTeam1 int NULL, CardsTeam2 int NULL, Sort int NULL, ResultID int NULL,MatchIcon varchar(255) NULL, RequestResults smallint NULL,
        );
      </statement>
    </table>

    <table name="competitor_to_outright">
      <statement type="DoesNotExist">
        CREATE TABLE competitor_to_outright
        (
        competitor_to_outright_id bigint NOT NULL PRIMARY KEY,
        competitor_id bigint NOT NULL references Competitor,
        match_id bigint NOT NULL references Matches(MatchId),
        position bigint NOT NULL,
        extended_id bigint NULL,
        extended_state Text NULL,
        update_id BIGINT references Updates(UpdateId)
        );

        CREATE UNIQUE INDEX competitor_to_outright_index on competitor_to_outright (competitor_id, match_id, position);
      </statement>
    </table>

    <table name="LiveMatchInfo">
      <statement type="DoesNotExist">
        CREATE TABLE LiveMatchInfo
        (
        MatchId BIGINT NOT NULL PRIMARY KEY REFERENCES Matches ON DELETE CASCADE,
        ExpiryDate timestamp with time zone NULL,
        UpdateID BIGINT references Updates,
        MatchMinute int NULL,
        PeriodInfo int NULL,
        SportType int NULL,
        Status int NULL,
        Score varchar(255) NULL
        );
      </statement>
    </table>

    <table name="MatchResult">
      <statement type="DoesNotExist">
        CREATE TABLE MatchResult
        (
        MatchId BIGINT NOT NULL PRIMARY KEY,
        BtrMatchID int NULL,
        TournamentGroupId BIGINT NULL REFERENCES Groups(GroupId),
        CategoryGroupId BIGINT NULL REFERENCES Groups(GroupId),
        SportGroupId BIGINT NULL REFERENCES Groups(GroupId),
        StartDate timestamp with time zone NULL,
        IsLiveBet smallint NULL,
        HomeCompetitorId bigint NOT NULL references Competitor (CompetitorId),
        AwayCompetitorId bigint NOT NULL references Competitor (CompetitorId),
        Score varchar(255) NOT NULL,
        UpdateID BIGINT references Updates,
        TeamWon varchar(64),
        ExtendedState TEXT NULL
        );
      </statement>
    </table>

    <table name="BetDomain">
      <statement type="DoesNotExist">
        CREATE TABLE BetDomain
        (
        BetDomainID BIGINT NOT NULL PRIMARY KEY,
        BtrLiveBetID int NULL, -- Debug
        MatchId BIGINT NOT NULL references Matches(MatchId),
        Status varchar(32) NOT NULL,
        UpdateID BIGINT references Updates,
        BetTag varchar(20) REFERENCES betdomain_type(tag) NOT NULL,
        BetDomainNumber int NOT NULL,
        NameTag varchar(64),
        Sort int NOT NULL,
        IsLiveBet smallint NULL,
        IsManuallyDisabled smallint NULL,
        SpecialOddValue varchar(32) NULL,
        SpecialOddValueFull varchar(32) NULL,
        Result varchar(200) NULL,
        --	ShortStringTag varchar(64),
        --	ID int NULL,
        --	Set int NULL,
        --	Deleted smallint NULL,
        --	SpecialOddValueFull varchar(100) NULL, -- separator in SpecialOddValue
        ExtendedState TEXT NULL -- ScoreFrequency int NULL, MinCombination int NULL,Calculated smallint NULL,OverAllScore decimal(12, 2) NULL,PeriodNumber int NULL,IsManualLiveBetDomain smallint NULL,
        );
      </statement>
    </table>

    <table name="Odd">
      <statement type="DoesNotExist">
        CREATE TABLE Odd
        (
        OutcomeId BIGINT NOT NULL PRIMARY KEY,
        OddId BIGINT NULL,
        BetDomainID BIGINT NOT NULL references BetDomain,
        Value decimal(12, 2) NULL,
        NameTag varchar(64),
        Sort int NOT NULL,
        OddTag varchar(32) NULL,
        Active smallint NULL,
        IsManuallyDisabled smallint NULL,
        UpdateID BIGINT references Updates,
        IsLiveBet smallint NULL,
        --	ShortStringTag varchar(64),
        --	ScanCode varchar(255) NULL,
        --	Calculated smallint NULL,
        --  Won smallint NULL,???
        --	UserID int NULL,
        --	Deleted smallint NULL,
        --	Status int NULL,
        --	IsLocked smallint NULL,
        ExtendedState TEXT NULL -- ScoreFrequency int NULL, MinCombination int NULL,Calculated smallint NULL,OverAllScore decimal(12, 2) NULL,PeriodNumber int NULL,IsManualLiveBetDomain smallint NULL,
        );
      </statement>
    </table>

    <table name="CompetitorToGroup">
      <statement type="DoesNotExist">
        CREATE TABLE CompetitorToGroup
        (
        CompetitorId BIGINT NOT NULL REFERENCES Competitor(CompetitorId),
        GroupId BIGINT NOT NULL REFERENCES Groups(GroupId),
        Type VARCHAR(16) NOT NULL,
        Sort INT NULL,
        PRIMARY KEY (CompetitorId, GroupId)
        );
      </statement>
    </table>

    <table name="MatchToGroup">
      <statement type="DoesNotExist">
        CREATE TABLE MatchToGroup
        (
        MatchId BIGINT NOT NULL REFERENCES Matches(MatchId),
        GroupId BIGINT NOT NULL REFERENCES Groups(GroupId),
        Type VARCHAR(16) NOT NULL,
        Sort INT NULL,
        UpdateID BIGINT references Updates,
        PRIMARY KEY (MatchId, GroupId)
        );
      </statement>
    </table>

    <table name="OutRightToGroup">
      <statement type="DoesNotExist">
        CREATE TABLE OutRightToGroup
        (
        OutRightId BIGINT NOT NULL REFERENCES OutRight(OutRightId),
        GroupId BIGINT NOT NULL REFERENCES Groups(GroupId),
        Sort INT NULL,
        PRIMARY KEY (OutRightId, GroupId)
        );
      </statement>
    </table>

    <table name="strings">
      <statement type="DoesNotExist">
        CREATE TABLE strings
        (
        string_id BIGINT PRIMARY KEY,
        category VARCHAR(32) NOT NULL,
        tag VARCHAR(128) NOT NULL,
        language VARCHAR(10) NOT NULL,
        object_id BIGINT NULL,
        update_id BIGINT REFERENCES Updates (UpdateId),
        text Text
        );

        CREATE UNIQUE INDEX index_tag_Language on strings (category, tag, language);
      </statement>
    </table>

    <table name="StationCash">
      <statement type="DoesNotExist">
        CREATE TABLE StationCash
        (
        StationCashID BIGSERIAL NOT NULL PRIMARY KEY,
        Cash decimal (10, 2) NOT NULL,
        MoneyIn smallint NOT NULL,
        OperationType text NULL,
        OperatorID varchar(255) NULL,
        CashCheckPoint smallint NOT NULL,
        DateModified timestamp with time zone NOT NULL
        );
      </statement>
    </table>

    <table name="StationMessage">
      <statement type="DoesNotExist">
        CREATE TABLE StationMessage
        (
        StationMessageID BIGSERIAL NOT NULL PRIMARY KEY,
        InsertDate timestamp with time zone NULL,
        Text text  NULL
        );
      </statement>
    </table>

    <table name="UserLight">
      <statement type="DoesNotExist">
        CREATE TABLE UserLight
        (
        NbtUserLightID BIGSERIAL NOT NULL PRIMARY KEY,
        FirstName varchar(255) NULL,
        LastName varchar(255) NULL,
        LoginName varchar(255) NULL,
        PasswordHash varchar(255) NULL,
        LoginMessage varchar(255) NULL,
        IsSystem smallint NULL,
        IsLocked smallint NULL,
        ChangePassword smallint NULL,
        LastLoggedIn timestamp with time zone NULL,
        LastLoggedOut timestamp with time zone NULL
        );
      </statement>
    </table>

    <table name="TransactionQueue">
      <statement type="DoesNotExist">
        CREATE TABLE TransactionQueue
        (
        TransactionQueueID BIGSERIAL NOT NULL PRIMARY KEY,
        Type smallint NOT NULL,
        Description text NOT NULL,
        TransactionId varchar(1024) NULL,
        UidState text NULL,
        Object1 text NULL,
        Object2 text NULL,
        Object3 text NULL,
        Tag1 text NULL,
        Tag2 text NULL,
        Created timestamp with time zone NOT NULL
        );
      </statement>
    </table>

    <table name="PlayerSessions">
      <statement type="DoesNotExist">
        CREATE TABLE playersessions
        (
        accountid integer,
        availablecash numeric,
        cardnumber character varying(50),
        language character varying(10),
        role character varying(10),
        rolecolor character varying(10),
        sessionid character varying(50),
        username character varying(100),
        closed boolean,
        playersessionid serial NOT NULL,
        CONSTRAINT pk_playersession_id PRIMARY KEY (playersessionid)
        );
      </statement>
    </table>

    <table name="PlayerTickets">
      <statement type="DoesNotExist">
        CREATE TABLE playertickets
        (
        "number" character varying(50),
        checksum character varying(30),
        playersessionid bigint,
        closed boolean,
        playerticketid serial NOT NULL,
        CONSTRAINT pk_playerticket_id PRIMARY KEY (playerticketid),
        CONSTRAINT fk_playersessions_id FOREIGN KEY (playersessionid)
        REFERENCES playersessions (playersessionid) MATCH FULL
        ON UPDATE NO ACTION ON DELETE NO ACTION
        );

        CREATE INDEX fki_playersession_id
        ON playertickets
        USING btree
        (playersessionid);

      </statement>
    </table>

    <table name="Tournament_Match_Lock">
      <statement type="DoesNotExist">
        CREATE TABLE tournament_match_lock
        (
        tmkey character varying(150) NOT NULL,
        arrlocks text,
        CONSTRAINT tmkey_pk PRIMARY KEY (tmkey)
        )
      </statement>
    </table>



  </tables>

  <data>


  </data>


</configuration>
